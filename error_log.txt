        public static void cleanGMSPackagesAndAccounts(string deviceId, bool isRootAndRemount = false)
        {
            if (isRootAndRemount)
            {
                runCMD("root", deviceId);
                runCMD("remount", deviceId);
            }
            //runCMD("shell \"mount -o rw,remount rootfs\"  ", deviceId);
            // run clean package
            runCMD(String.Format("shell pm clear {0}", "com.android.chrome"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.android.vending"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.android.providers.contacts"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.android.htmlviewer"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.android.location.fused"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.android.providers.media"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.android.providers.downloads"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.android.providers.downloads.ui"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "org.lineageos.jelly"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.android.webview"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.webview"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.gsf"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.ims"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.gm"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.calendar"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.play.games"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.gsf.login"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.youtube"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.apps.magazines"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.apps.docs"), deviceId);
            //runCMD(String.Format("shell pm clear {0}", "tugapower.codeaurora.browser"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.configupdater"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.onetimeinitializer"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.setupwizard"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.tts"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.apps.restore"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.backuptransport"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.carriersetup"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.ext.services"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.feedback"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.partnersetup"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.syncadapters.calendar"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.syncadapters.contacts"), deviceId);
            runCMD(String.Format("shell pm clear {0}", "com.google.android.gms"), deviceId);

            string[] packageFolder = new string[]
            {
                "com.android.calllogbackup",
                "com.android.chrome",
                "com.android.companiondevicemanager",
                "com.android.companiondevicemanager.auto_generated_characteristics_rro",
                "com.android.cts.ctsshim",
                "com.android.cts.priv.ctsshim",
                "com.android.htmlviewer",
                "com.android.keychain",
                "com.android.localtransport",
                "com.android.location.fused",
                "com.google.android.accessibility.soundamplifier",
                "com.google.android.accessibility.switchaccess",
                "com.google.android.aicore",
                "com.google.android.apps.accessibility.voiceaccess",
                "com.google.android.apps.carrier.carrierwifi",
                "com.google.android.apps.carrier.log",
                "com.google.android.apps.cbrsnetworkmonitor",
                "com.google.android.apps.customization.pixel",
                "com.google.android.apps.dreamliner",
                "com.google.android.apps.internal.betterbug",
                "com.google.android.apps.messaging",
                "com.google.android.apps.nbu.files",
                "com.google.android.apps.pixel.agent",
                "com.google.android.apps.pixel.creativeassistant",
                "com.google.android.apps.pixel.dcservice",
                "com.google.android.apps.pixel.relationships",
                "com.google.android.apps.pixel.support",
                "com.google.android.apps.privacy.wildlife",
                "com.google.android.apps.recorder",
                "com.google.android.apps.restore",
                "com.google.android.apps.scone",
                "com.google.android.apps.setupwizard.searchselector",
                "com.google.android.apps.turbo",
                "com.google.android.apps.weather",
                "com.google.android.apps.wellbeing",
                "com.google.android.apps.work.clouddpc",
                "com.google.android.as",
                "com.google.android.as.oss",
                "com.google.android.avatarpicker",
                "com.google.android.carrier",
                "com.google.android.carrierlocation",
                "com.google.android.carriersetup",
                "com.google.android.configupdater",
                "com.google.android.connectivitythermalpowermanager",
                "com.google.android.dialer",
                "com.google.android.dreamlinerupdater",
                "com.google.android.euicc",
                "com.google.android.euiccoverlay",
                "com.google.android.feedback",
                "com.google.android.flipendo",
                "com.google.android.flipendo.pixel.overlay",
                "com.google.android.gms",
                "com.google.android.gms.location.history",
                "com.google.android.gms.supervision",
                "com.google.android.grilservice",
                "com.google.android.gsf",
                "com.google.android.hardwareinfo",
                "com.google.android.markup",
                "com.google.android.marvin.talkback",
                "com.google.android.onetimeinitializer",
                "com.google.android.overlay.googleconfig",
                "com.google.android.overlay.googlewebview",
                "com.google.android.overlay.permissioncontroller",
                "com.google.android.overlay.pixelconfig2018",
                "com.google.android.overlay.pixelconfig2019",
                "com.google.android.overlay.pixelconfig2019midyear",
                "com.google.android.overlay.pixelconfigcommon",
                "com.google.android.packageinstaller",
                "com.google.android.partnersetup",
                "com.google.android.pixel.avatarpicker",
                "com.google.android.pixel.setupwizard",
                "com.google.android.pixel.setupwizard.overlay",
                "com.google.android.projection.gearhead",
                "com.google.android.settings.clear.calling.overlay",
                "com.google.android.settings.intelligence",
                "com.google.android.settings.overlay.pixelvpnconfig",
                "com.google.android.setupwizard",
                "com.google.android.storagemanager",
                "com.google.android.tag",
                "com.google.android.trichromelibrary_699813532",
                "com.google.android.tts",
                "com.google.android.webview",
                "com.google.ar.core",
                "com.google.assistant.hubui",
                "com.google.audio.hearing.visualization.accessibility.scribe",
                "com.google.euiccpixel",
                "com.google.euiccpixel.overlay.gs201",
                "com.google.euiccpixel.permissions",
                "com.google.mainline.adservices",
                "com.google.mainline.telemetry",
                "com.google.omadm.trigger"
            };

            string[] rootDir = new string[]
            {
                "~/data/data",
                "~/data/user/0",
                "~/data/user_de/0"
            };

            foreach (var dir in rootDir)
            {
                foreach (var package in packageFolder)
                {
                    runCMD(String.Format("shell \"rm -rf {0}/{1}/* \"", dir, package), deviceId);
                }
            }

            runCMD(String.Format("shell \"rm -rf {0} \"", Package_Data.SYSTEM_SYNC), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", Package_Data.SYSTEM_CE), deviceId);
            //runCMD(String.Format("shell \"rm -rf {0} \"", Package_Data.SYSTEM_DE), deviceId); // Pixel is starting...
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/accounts_de.db"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/accounts_de.db-journal"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/LocalesFromDelegatePrefs.xml"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/persisted_taskIds.txt"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/apprestriction"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/app_lock"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/powerstats"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/ringtones"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system_de/0/system"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system/users/0/settings_ssaid.xml"), deviceId);

            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/drm/fwdlock/kek.dat"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system/sync/*"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system/slice/*"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/vendor/mediadrm/IDM1013/L3/*"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/system/product/app/webview/oat/*"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/system/product/app/webview/*/oat/*"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/system/dropbox/*"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/misc/profiles/*"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/data/misc/gatekeeper/*"), deviceId);
            //DeviceService.setNewUserKey(deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "./etc/security/otacerts.zip"), deviceId);
            runCMD("remount", deviceId);
            updateFileDateTimeModification("./system/product/priv-app", deviceId);
            updateFileDateTimeModification("./system/product/app", deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/mnt/user/0/self/primary/Android/data/com.google.android.gms"), deviceId);
            runCMD(String.Format("shell \"rm -rf {0} \"", "/mnt/user/0/self/primary/Android/data/com.android.vending"), deviceId);
        }
